{"version":3,"sources":["Components/Assets/default_image.jpg","Components/ImageGenerator/ImageGenerator.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","ImageGenerator","image_url","setImage_url","useState","inputRef","useRef","loading","setLoading","React","createElement","className","src","default_image","alt","type","ref","placeholder","onClick","async","current","value","response","fetch","method","headers","Content-Type","Authorization","concat","process","User-Agent","body","JSON","stringify","prompt","n","size","data_array","json","data","url","imageGenerator","App","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sPCoExBC,MAhEOA,KACnB,MAAOC,EAAUC,GAAgBC,mBAAS,KAC1C,IAAIC,EAAWC,iBAAO,MAEtB,MAAOC,EAAQC,GAAcJ,oBAAS,GAyCtC,OACIK,IAAAC,cAAA,OAAKC,UAAU,sBACXF,IAAAC,cAAA,OAAKC,UAAU,UAAS,YAASF,IAAAC,cAAA,YAAM,cACvCD,IAAAC,cAAA,OAAKC,UAAU,eACXF,IAAAC,cAAA,OAAKC,UAAU,SAAQF,IAAAC,cAAA,OAAKE,IAAiB,MAAZV,EAAgBW,IAAcX,EAAWY,IAAI,MAC9EL,IAAAC,cAAA,OAAKC,UAAU,WACXF,IAAAC,cAAA,OAAKC,UAAWJ,EAAQ,mBAAmB,gBAC3CE,IAAAC,cAAA,OAAKC,UAAWJ,EAAQ,eAAe,gBAAgB,kBAG/DE,IAAAC,cAAA,OAAKC,UAAU,cACXF,IAAAC,cAAA,SAAOK,KAAK,OAAOC,IAAKX,EAAUM,UAAU,eAAeM,YAAY,kCACvER,IAAAC,cAAA,OAAKC,UAAU,eAAeO,QAASA,KAjD5BC,WACnB,GAA4B,KAAzBd,EAASe,QAAQC,MAChB,OAAO,EAGXb,GAAW,GAGX,MAAMc,QAAiBC,MACnB,+CACA,CACIC,OAAQ,OACRC,QAAQ,CACJC,eAAe,mBACfC,cACA,UAAAC,OACUC,4DACVC,aAAa,UAEjBC,KAAMC,KAAKC,UAAU,CACjBC,OAAM,GAAAN,OAAIvB,EAASe,QAAQC,OAE3Bc,EAAE,EAEFC,KAAK,cAKjB,IAGIC,SAHaf,EAASgB,QAGNC,KACpBpC,EAAakC,EAAW,GAAGG,KAC3BhC,GAAW,IAeyCiC,KAAmB,eCjDhEC,MARf,WACE,OACEjC,IAAAC,cAAA,WACED,IAAAC,cAACT,EAAc,QCKN0C,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC9C,EAAA+C,EAAA,GAAAC,KAAAhD,EAAAiD,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlD,IAAAC,cAACD,IAAMmD,WAAU,KACfnD,IAAAC,cAACgC,EAAG,QAORC","file":"static/js/main.753e5795.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default_image.eeda8012.jpg\";","import React, {useRef, useState } from \"react\";\nimport './ImageGenerator.css'\nimport default_image from '../Assets/default_image.jpg'\n\nconst ImageGenerator = () => {\n    const [image_url,setImage_url] = useState(\"/\");\n    let inputRef = useRef(null);\n    //used for updating the image of the web page\n    const [loading,setLoading] = useState(false);\n    //loading bar jab generate pe click karenge tab dikhna chahiye, usse pehle nahi isliye false kardiya\n \n \n    const imageGenerator = async () => {\n        if(inputRef.current.value===\"\"){\n            return 0;\n            //agar koi input text nahi diya\n        }\n        setLoading(true);\n        //before image loaded the \"loading\" text will be shown\n        //debugger;\n        const response = await fetch (\n            \"https://api.openai.com/v1/images/generations\",\n            {\n                method: \"POST\",\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                    Authorization:\n                    // console.log(\"Hello\", process.env.REACT_APP_OPENAI_API_KEY)\n                    `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n                    \"User-Agent\":\"Chrome\",\n                },\n                body: JSON.stringify({\n                    prompt:`${inputRef.current.value}`,\n                    //get the text written in the input field\n                    n:1,\n                    //we want only 1 image result\n                    size:\"512x512\",\n                    //what size image do we want\n                }),\n            }\n        );\n        let data = await response.json();\n        // console.log(data);\n        //image ka url console mein dikh jaayega, just copy its string path\n        let data_array=data.data;\n        setImage_url(data_array[0].url);\n        setLoading(false);\n        //after image loaded the \"loading\" text will be removed\n    }\n    return (\n        <div className=\"ai-image-generator\">\n            <div className=\"header\">AI Image <span>generator</span></div>\n            <div className=\"img-loading\">\n                <div className=\"image\"><img src={image_url===\"/\"?default_image:image_url} alt=\"\"></img></div>\n                <div className=\"loading\">\n                    <div className={loading?\"loading-bar-full\":\"loading-bar\"}></div>\n                    <div className={loading?\"loading-text\":\"display-none\"}>Loading.....</div>\n                </div>\n            </div>\n            <div className=\"search-box\">\n                <input type=\"text\" ref={inputRef} className=\"search-input\" placeholder=\"Describe What You Want To See\"/>\n                <div className=\"generate-btn\" onClick={()=>{imageGenerator()}}>Generate</div>\n            </div>\n        </div>\n    )\n }\n \n \n export default ImageGenerator; ","import React from 'react';\nimport './App.css';\nimport ImageGenerator from './Components/ImageGenerator/ImageGenerator';\n\nfunction App() {\n  return (\n    <div>\n      <ImageGenerator/>\n    </div>\n  ); \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}